homework 1.08 

1 уровень сложности: Написать самостоятельно сортировку слиянием.
Стереть все то, что написали во время классной работы и заново написать merge sort, опираясь на текстовое описание и псевдокод.
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    return merge(left_half, right_half)


def merge(left, right):
    merged = []
    left_index, right_index = 0, 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] < right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    while left_index < len(left):
        merged.append(left[left_index])
        left_index += 1

    while right_index < len(right):
        merged.append(right[right_index])
        right_index += 1

    return merged


# Пример использования:
if __name__ == "__main__":
    unsorted_array = [38, 27, 43, 3, 9, 82, 10]
    sorted_array = merge_sort(unsorted_array)
    print(sorted_array)





homework 31.07
Задача getMin().
Реализовать структуру данных SpecialStack, которая поддерживает все операции со стеком, такие как push(), pop(), isEmpty(), … и дополнительную операцию getMin(), которая должна возвращать минимальный элемент из SpecialStack. 



class Stack {
  constructor() {
    this.items = [];
  }

  push(element) {
    this.items.push(element);
  }

  pop() {
    if (this.isEmpty()) {
      return "Stack is empty";
    }
    return this.items.pop();
  }

  peek() {
    return this.items[this.items.length - 1];
  }

  isEmpty() {
    return this.items.length === 0;
  }

  size() {
    return this.items.length;
  }
}

class SpecialStack extends Stack {
  constructor() {
    super();
    this.minStack = new Stack(); // Дополнительный стек для хранения минимальных элементов
  }

  push(element) {
    if (this.isEmpty()) {
      super.push(element);
      this.minStack.push(element);
    } else {
      super.push(element);
      const currentMin = this.minStack.peek();
      if (element < currentMin) {
        this.minStack.push(element);
      } else {
        this.minStack.push(currentMin);
      }
    }
  }

  pop() {
    if (this.isEmpty()) {
      return "Stack is empty";
    }
    this.minStack.pop();
    return super.pop();
  }

  getMin() {
    if (this.isEmpty()) {
      return "Stack is empty";
    }
    return this.minStack.peek();
  }
}

// Пример использования:
const specialStack = new SpecialStack();
specialStack.push(5);
specialStack.push(2);
specialStack.push(7);
specialStack.push(1);

console.log("Min element:", specialStack.getMin()); // Выведет Min element: 1

specialStack.pop();
specialStack.pop();

console.log("Min element:", specialStack.getMin()); // Выведет Min element: 2
